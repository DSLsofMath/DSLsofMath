* Small A2 Q&A / logic reminder
+ Links:
  [[https://youtu.be/y6weZisWeDM?list=PLf5C73P7ab-5sdvsqCjnF8iaYOtXMRNaZ&t=384][Structural homomorphism (YouTube)]] + [[https://jamboard.google.com/d/1_t3xMPykXNGYIPDZ_10veFG4Grrv47xACEgi4CSmhBc/viewer?f=3][Jamboard]]
** Concrete logic example
data E where  Mul :: E->E->E   -- mul :: S -> S -> S
              Add :: E->E->E   -- add :: S -> S -> S
              Zer :: E         -- zer :: S
type S = REAL -> REAL

  P(h) = " h is a homomorphism from E to S "
  State and simplify not P(eval') where eval' = D . eval

+ P(h) = Exists mul, add, zer. H2(h,Mul,mul) & H2(h,Add,add) & H0(h,Zer,zer)

Calculate:

  not P(eval')
= -- Def. of P
  not (Exists mul, add, zer. H2(eval',Mul,mul) & H2(eval',Add,add) & H0(eval',Zer,zer))
= -- By not-propagation ("not Exists ~ Forall not")
  Forall mul, add, zer. not (H2(eval',Mul,mul) & H2(eval',Add,add) & H0(eval',Zer,zer)))
= -- de Morgan laws
  Forall mul, add, zer. (not H2(eval',Mul,mul)) | (not H2(eval',Add,add)) | (not H0(eval',Zer,zer))

Pick the first term
  not H2(eval',Mul,mul)
= -- Def. of H2
  not (Forall x, y. eval' (Mul x y) = mul (eval' x) (eval' y)

Now the proof can continue in the same way as the examples earlier
which were not homomorphisms (|isPrime :: Nat -> Bool| and |eval' ::
FunExp -> (R->R)|, both in Chapter 4).

* Power Series

+ See file:Live_6_1.lhs for Ring instances

** definitions of deriv and integ + numeric instances

** transformation from semantics (ODE) to syntax (coefficient equations)
+ f x = f 0 + \int_0^x f'   -- semantics
+ fs = integ (f 0) fs'      -- syntax, with f = eval fs
** solving differential equations "by hand"
+ expx,
+ sinx, cosx
  si = [0,  1,  0  ,-1/6, 0   , ...]
  co = [1,  0, -1/2,  0 , 1/24, ...]

* Live coding "solving ODEs with Power Series" (file:Live_6_2.lhs)













--- Later ---



* (Thursday lecture) Maclaurin series
** Book reminder
+ You can bring a (physical) book to the exam.
+ Book https://www.collegepublications.co.uk/computing/?00024
  /home/patrikj/Pictures/DSLsofMath_book_front_cover.jpg
** Maclaurin series = Taylor series at the point zero

Big picture: a transformation in three stages

  f
-> compute all derivatives
  [f, f', f'', ...]
-> apply 0
  [f 0, f' 0, f'' 0, ...]
-> divide by factorials
  [(f 0)/0!, (f' 0)/1!, (f'' 0)/2!, ...]

In the lecture we worke through the different steps with examples and
motivation / explanation.
* Live coding DS = Derivative Stream: a stream of all derivatives
+ Introduce clases
+ See file:Live_6_3.lhs for Ring instances
* If time permits: cont. live coding L6.2
+ DS instances for MulGroup and Transcendental
