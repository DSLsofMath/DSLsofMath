* Ch0
** L/00/Intro.lhs:
*** Around line 187: as:=at
#+BEGIN_SRC diff
-formal than usual, as least from a linguistic perspective.
+formal than usual, at least from a linguistic perspective.
#+END_SRC
*** Around line 322
#+BEGIN_SRC diff
-github repository.
+GitHub repository.
#+END_SRC
* Ch1
** L/01/W01.lhs
*** Around line 105
#+BEGIN_SRC diff
-Every time, the semantic is a set.
+Every time, the semantics is a set.
#+END_SRC
*** Around line 117
#+BEGIN_SRC diff
-variables as a DSL.
+variable as a DSL.
#+END_SRC
*** Around line 268
#+BEGIN_SRC diff
-Note that this is an example of \emph{partially applied} function:
+Note that this is an example of a \emph{partially applied} function:
#+END_SRC
*** Around line 290
#+BEGIN_SRC diff
-we present |flip| which flips the order the two arguments of a binary
+we present |flip| which flips the order of the two arguments of a binary
#+END_SRC
*** Around line 423
#+BEGIN_SRC diff
-: Double| (Not a Number).
+:: Double| (Not a Number).
#+END_SRC
*** Around line 439
#+BEGIN_SRC diff
-Often the type |Maybe a| with values |Nothing| and |Just a| (for all
+Often the type |Maybe a| with values |Nothing| and |Just x| (for all
#+END_SRC
*** Around line 562
#+BEGIN_SRC diff
-You do \emph{not} need to understand the mathematics behind at this
+You do \emph{not} need to understand the mathematics behind it at this
#+END_SRC
*** Around line 566
#+BEGIN_SRC diff
-\citet*{edwards2008elementary} contains at page 266 the following
+\citet*{edwards2008elementary} contains on page 266 the following
#+END_SRC
*** Around line 594
#+BEGIN_SRC diff
-semantic meaning about its type (this is also common in functional
+semantic meaning about its type. (This is also common in functional
#+END_SRC
*** Around line 596
#+BEGIN_SRC diff
-suffix, as in the name |xs|, to denote a list of values.).
+suffix, as in the name |xs|, to denote a list of values.)
#+END_SRC
*** Around line 731
#+BEGIN_SRC diff
-may also be useful to have another newtype for complex as a pair of
+may also be useful to have another newtype for complex numbers as a pair of
#+END_SRC
*** Around line 766
#+BEGIN_SRC diff
-Examples values: |zero = Z|, |one = S Z|, |three = S (S one)|.
+Example values: |zero = Z|, |one = S Z|, |three = S (S one)|.
#+END_SRC
*** Around line 934
#+BEGIN_SRC diff
-  is the \addtoindex{factorial} \lnOnly{(sv: fakultet)}.}).
+  is the \addtoindex{factorial}\lnOnly{ (sv: fakultet)}.}).
#+END_SRC
** L/01/ComplexSem.lhs
*** Around line 6
#+BEGIN_SRC diff
-\citet{DBLP:journals/corr/IonescuJ16}.
+\citet{DBLP:journals/corr/IonescuJ16}
#+END_SRC
*** Around line 58
#+BEGIN_SRC diff
-say |i * i| is related in way with |square i|, since the
+say |i * i| is related in any way to |square i|, since the
#+END_SRC
*** Around line 292
#+BEGIN_SRC diff
-Second, it shows that, in mathematical arguments, one needs not
+Second, it shows that, in mathematical arguments, one need not
#+END_SRC
*** Around line 296
#+BEGIN_SRC diff
-We already know that we have an \addtoindex{isomorphism} between pair
+We already know that we have an \addtoindex{isomorphism} between pairs
#+END_SRC
*** Around line 376
#+BEGIN_SRC diff
-The operations for |ComplexSem| are defined in module |CSem|,
+The operations for |ComplexSem| are defined in the module |CSem|,
#+END_SRC
** L/01/ComplexSyn.lhs
*** Around line 424
#+BEGIN_SRC diff
-Note that |propAssocA| is a higher-order function: it takes a function
+Note that |propAssoc| is a higher-order function: it takes a function
#+END_SRC
** L/01/SimpleFunExp.lhs
*** Around line 38
#+BEGIN_SRC diff
-Examples: let $f(x) = x - 1$ and let $t = 5*f(2)$.
+Examples: let $f(x) = x + 1$ and let $t = 5*f(2)$.
#+END_SRC
** L/01/E1.lhs
*** Around line 136: if:=is
#+BEGIN_SRC diff
-This kind of transformation if often useful, and it works also for
+This kind of transformation is often useful, and it works also for
#+END_SRC
*** Around line 201: toComplex:=toComplexSyn
#+BEGIN_SRC diff
-  like |(Var "z") :*: toComplex 1|.
+  like |(Var "z") :*: toComplexSyn 1|.
#+END_SRC
*** Around line 221: ComplexSem:=Complex; CS:=C
#+BEGIN_SRC diff
-embed :: ComplexSem r -> ComplexSyn r
-embed (CS (x, y)) = ToComplexCart x y
+embed :: Complex r -> ComplexSyn r
+embed (C (x, y)) = ToComplexCart x y
#+END_SRC
* Ch2
** L/02/PropositionalLogic.lhs
*** Around line 236
#+BEGIN_SRC diff
-evaluate top-level truth value of the expression for each row.
+evaluate the top-level truth value of the expression for each row.
#+END_SRC
*** Around line 268
#+BEGIN_SRC diff
-There are much better algorithms to evaluate truth values than the
+There are much better algorithms to evaluate propositions than the
#+END_SRC
*** Around line 288
#+BEGIN_SRC diff
-But we still have to figure out what consitutes proofs.
+But we still have to figure out what constitutes proofs.
#+END_SRC
*** Around line 369
#+BEGIN_SRC diff
-For conjunction (|And|), we have two eliminations rules:
+For conjunction (|And|), we have two elimination rules:
#+END_SRC
*** Around line 374
#+BEGIN_SRC diff
-|AndElimR| symmetrically), where the extra |Prop| argument corresponds
-to~|Q|.
+|AndElimR| symmetrically), where the extra |Prop| arguments corresponds
+to~|Q|~and~|P|~respectively.
#+END_SRC
** L/02/FOL.lhs
*** Around line 340
#+BEGIN_SRC diff
-The elimination and introduction rules for existential quantification are:
+The introduction and elimination rules for existential quantification are:
#+END_SRC
*** Around line 448
#+BEGIN_SRC diff
-|(t, bt)| is a program of type |Exists x (P x)| if |bt| is has type |P t|.
+|(t, bt)| is a program of type |Exists x (P x)| if |bt| has type |P t|.
#+END_SRC
*** Around line 450
#+BEGIN_SRC diff
-|f| is a program of type |Forall x (P x)| if |f t| is has type |P t| for all |t|.
+|f| is a program of type |Forall x (P x)| if |f t| has type |P t| for all |t|.
#+END_SRC
*** Around line 475
#+BEGIN_SRC diff
-as in the Haskell data type representing our proof DSL.
+in the Haskell data type representing our proof DSL.
#+END_SRC
*** Around line 649
#+BEGIN_SRC diff
-theorem-proving in mind.  For this reason it is easily possible make
+theorem-proving in mind.  For this reason it is easily possible to make
#+END_SRC
** L/02/Examples.lhs
*** Around line 47
#+BEGIN_SRC diff
-|GCD(a,b)>=2|, which in turn implies |not Q|.
+|2| is a factor of |GCD#(a,b)|, which in turn implies |not Q|.
#+END_SRC
** L/02/CalculusConcepts.lhs
*** Around line 255
#+BEGIN_SRC diff
As mentioned in \cref{sec:infseq}, one way to handle is this to treat
As mentioned in \cref{sec:infseq}, one way to handle this is to treat
#+END_SRC
* Ch3
** L/03/W03.lhs
*** Around line 255
#+BEGIN_SRC diff
-There is the added difficulty that, just like the subscript in |f'x|,
-the |x| in |∂ x| is not the |x| bound by the universal quantifier, but
-just a symbol.
+Note that the |x| in |∂ x| is not the |x| bound by the universal
+quantifier, but just a symbol (just like the subscript in |f'x|).
#+END_SRC
*** Around line 662
#+BEGIN_SRC diff
-make provide a dummy definition for a few of them in one go:
+make a dummy definition for a few of them in one go:
#+END_SRC
*** Around line 668
#+BEGIN_SRC diff
-variable names), |deriv| for the derivation operator (|D| above), and
+variable names), |deriv| for the differential operator (|D| above), and
#+END_SRC
*** Around line 715
#+BEGIN_SRC diff
-pthe type-checker is happy with them.
+the type-checker is happy with them.
#+END_SRC
*** Around line 816
#+BEGIN_SRC diff
-instances of |Eq|: |Char|, |[Char]|, |[[Char]]|, etc.
+instances of |Eq|: |Bool|, |[Bool]|, |[[Bool]]|, etc.
#+END_SRC
*** Around line 980
#+BEGIN_SRC diff
-As an example, consider again the DSL of expressions of one variables.
+As an example, consider again the DSL of expressions of one variable.
#+END_SRC
*** Around line 1138
#+BEGIN_SRC diff
-We we can summarise those as follows:
+We can summarise those as follows:
#+END_SRC
*** Around line 1212
#+BEGIN_SRC diff
-Because the specification of derivation rules is already in the right
+Because the specification of the differentiation rules is already in the right
#+END_SRC
** L/03/E3.lhs
*** Around line 14
#+BEGIN_SRC diff
-  due to gravity |g| which makes the equations hold.
+  due to gravity |g| which make the equations hold.
#+END_SRC
*** Around line 154
#+BEGIN_SRC diff
-    Let |A| and |B| be events with |P B > 0|.  given that |B| occurs,
+    Let |A| and |B| be events with |P B > 0|.  Given that |B| occurs,
#+END_SRC
* Ch4
** L/04/W04.lhs
*** Around line 53
#+BEGIN_SRC diff
-As two examples, we have the homomorphisms |exp| and |log|, specified
+As two examples, we have the homomorphisms |exp| and |log|, partially specified
#+END_SRC
*** Around line 641
#+BEGIN_SRC diff
-Such homomorphisms take the form |apply c|, for any |c|.
+The simplest such homomorphisms take the form |apply c|, for any |c|.
#+END_SRC
*** Around line 662
#+BEGIN_SRC diff
-If an isomorphism exist between two sets, we say that they are
+If an isomorphism exists between two sets, we say that they are
#+END_SRC
*** Around line 790
#+BEGIN_SRC diff
-would be to taken |odd| instead of |even| as the homomorphism.
+would be to take |odd| instead of |even| as the homomorphism.
#+END_SRC
*** Around line 1838
#+BEGIN_SRC diff
-Because |apply c| is so simple, it is an homomorphism not only for
+Because |apply c| is so simple, it is a homomorphism not only for
#+END_SRC
*** Around line 1975
#+BEGIN_SRC diff
-\href{https://github.com/DSLsofMath/ctfp2014}{github}).
+\href{https://github.com/DSLsofMath/ctfp2014}{GitHub}).
#+END_SRC
*** Around line 2125
#+BEGIN_SRC diff
-  Recall expressions (or functions) of one variables, from
+  Recall expressions (or functions) of one variable, from
#+END_SRC
** L/04/E4.lhs
*** Around line 374
#+BEGIN_SRC diff
-\item Let |P(h) = | ``|h| is a homomorphism from |FunExp| to
-  |FunSem = REAL -> REAL|''.
+\item Let |P(h) = | \emph{|h| is a homomorphism from |FunExp| to
+  |FunSem = REAL -> REAL|}.
#+END_SRC
*** Around line 503
#+BEGIN_SRC diff
-\href{https://github.com/DSLsofMath/DSLsofMath/}{github}.
+\href{https://github.com/DSLsofMath/DSLsofMath/}{GitHub}.
#+END_SRC
* Ch5
** L/05/W05.lhs
*** Around line 202
#+BEGIN_SRC diff
-newtype Poly a = Poly [a] deriving (Show, Eq)
-\end{code}
+newtype Poly a = Poly [a] deriving (Show)
+\end{code}
%
Equality should not depend on trailing zeroes, thus |deriving| should
not be used for the |Eq| type class.
%
We get back to the equality definition later, but it is also a good
exercise.
#+END_SRC
* Ch6
** L/06/W06.lhs
*** Around line 130
#+BEGIN_SRC diff
-    (a * b) : (evalAll (d e1 :*: e2) + evalAll (e1 * d e2))
+    (a * b) : (evalAll (d e1 :*: e2) + evalAll (e1 :*: d e2))
#+END_SRC
*** Around line 757
#+BEGIN_SRC diff
-eval (expPS as) = exp (eval as)
+eval (expPS as) = exp . eval as
#+END_SRC
*** Around line 763
#+BEGIN_SRC diff
-  D (eval (expPS as)) = exp (eval as) * D (eval as)
+  D (eval (expPS as)) = (exp . eval as) * D (eval as)
#+END_SRC
*** Around line 768
#+BEGIN_SRC diff
-<=>  {- |eval| homomorphism -}
+<=>  {- |H1(eval,deriv,D)|, Spec. of |expPS|, |H2(eval,(*),(*))| -}
#+END_SRC
* Ch7
** L/07/W07.lhs
*** Around line 298
#+BEGIN_SRC diff
-For |Vector|, it can is defined indexwise.
+For |Vector|, it can be defined indexwise.
#+END_SRC

*** Around line 347
#+BEGIN_SRC diff
-The canonical basis for |Vector| are given by
+The canonical basis for |Vector| is given by
#+END_SRC
*** Around line 364
#+BEGIN_SRC diff
-    |v  ==  (v 0 *^ e 0) + ... + (v n *^ e n)|
+    |V v  ==  (v 0 *^ e 0) + ... + (v n *^ e n)|
#+END_SRC
*** Around line 390
#+BEGIN_SRC diff
-    |v == linComb v e|
+    |V v == linComb v e|
#+END_SRC
*** Around line 422
#+BEGIN_SRC diff
-f v  =  f (v 0 *^ e 0 + ... + v n *^ e n)
+f (V v)  =  f (v 0 *^ e 0 + ... + v n *^ e n)
#+END_SRC
*** Around line 429
#+BEGIN_SRC diff
-vector space structure: vector-space \index{homomorphism}s.
+vector space structure: vector-space \addtoindex{homomorphism}s.
#+END_SRC
*** Around line 441
#+BEGIN_SRC diff
-Because |v = linComb v e = (v 0 *^ e 0 + ... + v n *^ e n)|, we also
+Because |V v = linComb v e = (v 0 *^ e 0 + ... + v n *^ e n)|, we also
#+END_SRC
*** Around line 445
#+BEGIN_SRC diff
-f v   =  f (  v 0 *^ e 0      + ... +  v n *^ e n)                  {- because |f| is linear -}
-      =       v 0 *^ f (e 0)  + ... +  v n *^ f (e n)  {-"\quad"-}  {- by def. of |linComb| -}
-      =  linComb v (f . e)
+f (V v)   =  f (  v 0 *^ e 0      + ... +  v n *^ e n)                  {- because |f| is linear -}
+          =       v 0 *^ f (e 0)  + ... +  v n *^ f (e n)  {-"\quad"-}  {- by def. of |linComb| -}
+          =  linComb v (f . e)
#+END_SRC
*** Around line 512
#+BEGIN_SRC diff
-f v = linComb v m = v 0 *^ m 0 + ... + v n *^ m n
+f (V v) = linComb v m = v 0 *^ m 0 + ... + v n *^ m n
#+END_SRC
*** Around line 515
#+BEGIN_SRC diff
-Each of the |m k| is a |Vector S G'|, as is the resulting |f v|.
+Each of the |m k| is a |Vector S G'|, as is the resulting |f (V v)|.
#+END_SRC
*** Around line 517
#+BEGIN_SRC diff
-If we look at the component |g'| of |f v| we have
+If we look at the component |g'| of |f (V v)| we have
#+END_SRC
*** Around line 519
#+BEGIN_SRC diff
-  f v g'                           = {- as above -}
+  f (V v) ! g'                     = {- as above -}
#+END_SRC
*** Around line 521
#+BEGIN_SRC diff
-  (linComb v m) g'                 = {- |linComb|, |(*^)|, |(+)| are all linear -}
+  (linComb v m) ! g'               = {- |linComb|, |(*^)|, |(+)| are all linear -}
#+END_SRC
*** Around line 523
#+BEGIN_SRC diff
-  linComb v (\g -> m g g')         {-"\ "-}
+  linComb v (\g -> m g ! g')       {-"\ "-}
#+END_SRC
*** Around line 546
#+BEGIN_SRC diff
-write |M i j| to mean the |i|th element of the |j|th column, i.e., |M
-i j = m j i|, so that, if we denote the usual matrix-vector
+write |M i ! j| to mean the |i|th element of the |j|th column, i.e.,
+|M i ! j = m j ! i|, so that, if we denote the usual matrix-vector
#+END_SRC
*** Around line 550
#+BEGIN_SRC diff
-(mulMV M v) i = linComb v (M i)
+(mulMV M (V v)) i = linComb v (M i)
#+END_SRC
*** Around line 555
#+BEGIN_SRC diff
-(mulMV M v) i                            = -- by def. of |mulMV|
-linComb v (M i)                          = -- by def. of |M i j|
-linComb v (\j -> m j i)                  = -- earlier computation (linearity)
-f v i
+(mulMV M (V v)) i                        = -- by def. of |mulMV|
+linComb v (M i)                          = -- by def. of |(M i) ! j|
+linComb v (\j -> m j ! i)              = -- earlier computation (linearity)
+f (V v) i
#+END_SRC
*** Around line 621
#+BEGIN_SRC diff
-Moreover |((M*) . e) g g' = M g' g|, i.e., the matrix constructed as
+Moreover |((M*) . e) g ! g' = M g' ! g|, i.e., the matrix constructed as
#+END_SRC
*** Around line 624
#+BEGIN_SRC diff
-In \cref{exc:Mstarcompose} you verify this by computing |((M*) . e ) g g'|.
+In \cref{exc:Mstarcompose} you verify this by computing |((M*) . e ) g !
+g'|.
#+END_SRC
*** Around line 683
#+BEGIN_SRC diff
-Let |w :: Vector S G|:
+Let |w :: G -> S|:
#+END_SRC
*** Around line 685
#+BEGIN_SRC diff
-M * w = w 0 *^ fv 0 + ... + w n *^ fv n
+M * (V w) = w 0 *^ fv 0 + ... + w n *^ fv n
#+END_SRC
*** Around line 688
#+BEGIN_SRC diff
-|M * v| and each of the |fv k| are ``almost scalars'': functions of
-type |() -> S|, thus, the only component of |M * w| is
+|M * (V v)| and each of the |fv k| are ``almost scalars'': functions of
+type |() -> S|, thus, the only component of |M * (V w)| is
#+END_SRC
*** Around line 689
#+BEGIN_SRC diff
-|M * (V v)| and each of the |fv k| are ``almost scalars'': functions of
+|M * (V w)| and each of the |fv k| are ``almost scalars'': functions of
#+END_SRC
*** Around line 690
#+BEGIN_SRC diff
-(M * w) ()  = w 0 * fv 0 () + ... + w n * fv n ()
-            = w 0 * v 0 + ... + w n * v n
+(M * (V w)) ()  = w 0 * fv 0 () + ... + w n * fv n ()
+                = w 0 * v 0 + ... + w n * v n
#+END_SRC
*** Around line 857
#+BEGIN_SRC diff
-The are also invertible (and so they form a group), and the inverse is
-the given by (conjugate-) transpose of the matrix.
+They are also invertible (and so they form a group), and the inverse is
+given by the (conjugate-) transpose of the matrix.
#+END_SRC
*** Around line 939
#+BEGIN_SRC diff
-The evaluator from the |Vector g s| representation to polynomial
+The evaluator from the |Vector s g| representation to polynomial
#+END_SRC
* notes
#+BEGIN_SRC diff
#+END_SRC
