*DSLs of Mathematics, Week 2*
* Admin:
** Bonus exercises:
+ Good work on Week 1: 17 submissions (~50% of course participants).
+ Hand-in is online (via canvas) before the exercise session
+ Then be ready (in person) to present/answer questions about your
  submission (in a separate room, with one TA).
** Extra Haskell lectures online [recommended watching]
+ Three YouTube videos about Haskell and "type driven development" are
  online covering: polymorphic functions, product types |(a,b)| and
  sum types |Either a b|.
** Course book <-> lecture video translation table available
+ From the 2022 instance: a file describing which parts of the
  lectures are connected to which parts of the book.
+ [[https://github.com/DSLsofMath/DSLsofMath/blob/master/L/README.org][github]]: [[file:../README.org][DSLsofMath/L/README.org]]
+ tldr; study week N = book chapter N.
** [[https://chalmers.instructure.com/courses/33098/assignments/101419][Assignment 1]]: (deadline 2025-02-04)
+ Monday 2025-02-10: "Presentation" (Q&A) slots
* Lecture 2.1
** DSL for Prop = Propositional Calculus (Satslogik)
+ syntax examples
+ (truth tables)
  type Table = Namn -> Bool
+ eval : Prop -> Table -> Bool
** DSL for Proofs
+ proof rules, proof terms
** DSL for Pure set theory (useful for [[https://chalmers.instructure.com/courses/33098/assignments/101419][Assignment 1]])
+ "untyped sets", "just sets all the way down"
+ Empty set, Singleton set constructor, {braces around enumeration}
+ Cardinality (number of elements)
+ Membership: x âˆˆ S
+ Union, Intersection - connection to logic through membership
+ Enumerating some sets (to get thinking started)
** [[file:Live_2_1.lhs][Live coding (Prop)]] [if there is time]
+ eval for Prop without variable names
+ add table for name lookup
+ generalise: polymorphic lifting functions






















* Lecture 2.2: First order logic (FOL) (as a new DSL, extending Prop)
+ [[https://jamboard.google.com/d/1aAzwgHktC5Ha2js9BPnv5IXTNGBrll3LLXpOhh-6rh8/viewer?f=0][L2.2 Jamboard]]
** FOL = First Order Logic
** adding a term language (for rationals, or sets, or ...)
** extend names to n-ary predicates over terms
** quantifiers: Forall and Exists
** Typed quantification
** Pushing negation through other constructors
** [[file:Live_2_2_2023.lhs][Live coding]] (syntax and semantics of FOL)
** Case study: sqrt 2 is not rational [proof by contradiction]
** Case study: p^q can be rational even when neither p nor q is [proof by cases]
** Perhaps: Case study: the limit of a function [from maths text to types and logic]
+ building proof terms (Tru, Fals, And, Or, Impl (->))
* Lecture 2.3: Extra lecture on Proof terms
+ From Live_2_3.lhs to Live_2_3_2022.lhs







































* Book https://www.collegepublications.co.uk/computing/?00024
/home/patrikj/Pictures/DSLsofMath_book_front_cover.jpg


















* DSLsofMath logo
../../admin/DSL_logo/DSL_logo.png


