* Week & chapter 3: Types in mathematics

Learning outcomes

** Knowledge and understanding
+ L3.1: organize areas of mathematics in DSL terms
+ L3.1: explain main concepts of elementary real analysis
+ L3: design and implement a DSL for derivatives

** Skills and abilities
+ L3.1: develop adequate notation for mathematical concepts
+ L3.2: perform calculational proofs

** Judgement and approach
+ A1: discuss and compare different software implementations of mathematical concepts

* Tuesday
** Week 3, Lecture 1: [[file:LimFun_slides.lhs][LimFun_slides.lhs]] + work on the blackboard
+ limit of a function (math text -> logic, scoping, lim)
+ types for some examples, most importantly D : (X->Y) -> (X->Y)
+ using lim to define |D|
+ some derivatives from the definition
  D (^2) = (2*)
  D (f+g) = D f + D g
+ Later (Exc. session): [[file:Live_3_1.lhs][Live coding derivatives]]
** Week 2, Lecture 3: DSL of proofs, Curry-Howard, proof examples
+ AndIntro, OrIntroL, OrIntroR
+ fst, snd, orElim
+ Proof examples in mathematics (irrational (sqrt 2), ...)
+ Later (Exc. session): Live-coding proof examples: [[file:~/src/DSLM/DSLsofMath/L/02/Live_2_3.lhs][Curry-Howard]]

* Thursday
** Week 3, Lecture 2, "slides" ([[https://jamboard.google.com/d/1jXX4nrptIAQu0NTi8YPF5ADuy8CyagBPHMx9vyz3_dI/viewer][Jamboard L3.2]])
+ Partial derivatives
+ [[file:LagrangeEqs.pdf][Lagrange Eq's]]
+ Lagrange example
** Week 3, Lecture 2 [[file:Live_3_2.lhs][Live coding]]
+ Type classes
+ finish implementation of deriv : FunExp -> FunExp
+ numeric instances for functions (x->a)

  Numeric classes in more detail

  function instances for numeric classes

  General type classes in Haskell [see code below]































* Book https://www.collegepublications.co.uk/computing/?00024
/home/patrikj/Pictures/DSLsofMath_book_front_cover.jpg
* DSLsofMath logo                |
../../admin/DSL_logo/DSL_logo.png
